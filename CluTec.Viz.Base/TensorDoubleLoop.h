////////////////////////////////////////////////////////////////////////////////////////////////////
// project:   CluTec.Viz.Base
// file:      TensorDoubleLoop.h
//
// summary:   Declares the tensor double loop class
//
//            Copyright (c) 2019 by Christian Perwass.
//
//            This file is part of the CluTecLib library.
//
//            The CluTecLib library is free software: you can redistribute it and / or modify
//            it under the terms of the GNU Lesser General Public License as published by
//            the Free Software Foundation, either version 3 of the License, or
//            (at your option) any later version.
//
//            The CluTecLib library is distributed in the hope that it will be useful,
//            but WITHOUT ANY WARRANTY; without even the implied warranty of
//            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//            GNU Lesser General Public License for more details.
//
//            You should have received a copy of the GNU Lesser General Public License
//            along with the CluTecLib library.
//            If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////////////////////////////////////////////

// Tensor Single Loop Library declaration

#ifndef _TENSOR_DOUBLE_LOOP_HH_
#define _TENSOR_DOUBLE_LOOP_HH_

#include <map>

#include "mem.h"
#include "makestr.h"
#include "CStrMem.h"
#include "mathelp.h"
#include "CLUException.h"
#include "TensorData.h"
#include "TensorIdx.h"

using std::map;


template<class CType>
class CTensorDoubleLoop
{
public:
	class InvalidLoopLevel : public CCluError
	{
	public:
		InvalidLoopLevel()
		{
			m_sErrorText = "Invalid loop level.";
		}
	};

	class InvalidTensorIdxRef : public CCluError
	{
	public:
		InvalidTensorIdxRef()
		{
			m_sErrorText = "Invalid tensor index reference.";
		}
	};

	class IncompatibleIndices : public CCluError
	{
	public:
		IncompatibleIndices()
		{
			m_sErrorText = "Indices are incompatible.";
		}
	};


public:
	struct SIdxData
	{
		int iFreeIdx;
		int iCount;		// Number of steps in this loop
		bool bBoth;		// If true, both loops need to be stepped.
						// If false, only m_pTFirst needs to be stepped.
		CTensorIdx<CType> *pTFirst;
		CTensorIdx<CType> *pTSecond;
	};

public:
	CTensorDoubleLoop();

	// Set Tensor Idx over which to loop
	void Set(CTensorIdx<CType>& rTLeft, CTensorIdx<CType>& rTRight) throw (CCluException);

	// Initialize Loops. Returns number of cascaded loops.
	int Init() throw (CCluException);

	// Step loop. Returns loop level, in which step was made.
	// Loop level starts at maximum for most inner loop (same value as returned from Init()).
	// If loop level is zero, all loops are finished.
	// No exceptions generated by this function!
	int Step();

	// Get number of steps at particular loop level.
	int StepCount(int iLevel) throw (CCluException);

	// Returns true if both loops are stepped at given loop level
	bool IsDoubleLoop(int iLevel) throw (CCluException);

	// Returns free index for given loop level
	int FreeIdx(int iLevel) throw (CCluException);

	// Get Reference to current element of left tensor in loop
	CType& GetLeftRef() { return m_pTLeft->GetStepRef(); }

	// Get Reference to current element of right tensor in loop
	CType& GetRightRef() { return m_pTRight->GetStepRef(); }

protected:
	CTensorIdx<CType> *m_pTLeft, *m_pTRight;		// Pointer to CTensorIdx instance

	Mem<SIdxData> m_mFreeIdx;	// list of free indices
};


#endif
