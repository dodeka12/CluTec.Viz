////////////////////////////////////////////////////////////////////////////////////////////////////
// project:   CluTec.Viz.Base
// file:      TensorSingleLoop.h
//
// summary:   Declares the tensor single loop class
//
//            Copyright (c) 2019 by Christian Perwass.
//
//            This file is part of the CluTecLib library.
//
//            The CluTecLib library is free software: you can redistribute it and / or modify
//            it under the terms of the GNU Lesser General Public License as published by
//            the Free Software Foundation, either version 3 of the License, or
//            (at your option) any later version.
//
//            The CluTecLib library is distributed in the hope that it will be useful,
//            but WITHOUT ANY WARRANTY; without even the implied warranty of
//            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//            GNU Lesser General Public License for more details.
//
//            You should have received a copy of the GNU Lesser General Public License
//            along with the CluTecLib library.
//            If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////////////////////////////////////////////

// Tensor Single Loop Library declaration

#ifndef _TENSOR_SINGLE_LOOP_HH_
	#define _TENSOR_SINGLE_LOOP_HH_

#include <map>

#include "mem.h"
#include "makestr.h"
#include "CStrMem.h"
#include "mathelp.h"
#include "CLUException.h"
#include "TensorData.h"
#include "TensorIdx.h"

	using std::map;

	template<class CType>
	class CTensorSingleLoop
	{
	public:

		class InvalidLoopLevel : public CCluError
		{
		public:

			InvalidLoopLevel()
			{
				m_sErrorText = "Invalid loop level.";
			}
		};

		class InvalidTensorIdxRef : public CCluError
		{
		public:

			InvalidTensorIdxRef()
			{
				m_sErrorText = "Invalid tensor index reference.";
			}
		};

	public:

		CTensorSingleLoop();

		// Set Tensor Idx over which to loop
		void Set(CTensorIdx<CType>& rT) throw(CCluException);

		// Initialize Loops. Returns number of cascaded loops.
		int Init() throw(CCluException);

		// Step loop. Returns loop level, in which step was made.
		// Loop level starts at maximum for most inner loop (same value as returned from Init()).
		// If loop level is zero, all loops are finished.
		// No exceptions generated by this function!
		int Step();

		// Get number of steps at particular loop level.
		int StepCount(int iLevel) throw(CCluException);

		// Get the total number of steps over all loops
		int TotalStepCount();

		// Get Reference to current element in loop
		CType& GetRef() { return m_pTIdx->GetStepRef(); }

		// Get Free Index List
		const Mem<int>& GetFreeIdxList() { return m_mFreeIdx; }

	protected:

		CTensorIdx<CType>* m_pTIdx;	// Pointer to CTensorIdx instance

		Mem<int> m_mFreeIdx;	// list of free indices
	};

#endif
