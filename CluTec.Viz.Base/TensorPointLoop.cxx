////////////////////////////////////////////////////////////////////////////////////////////////////
// project:   CluTec.Viz.Base
// file:      TensorPointLoop.cxx
//
// summary:   tensor point loop class
//
//            Copyright (c) 2019 by Christian Perwass.
//
//            This file is part of the CluTecLib library.
//
//            The CluTecLib library is free software: you can redistribute it and / or modify
//            it under the terms of the GNU Lesser General Public License as published by
//            the Free Software Foundation, either version 3 of the License, or
//            (at your option) any later version.
//
//            The CluTecLib library is distributed in the hope that it will be useful,
//            but WITHOUT ANY WARRANTY; without even the implied warranty of
//            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//            GNU Lesser General Public License for more details.
//
//            You should have received a copy of the GNU Lesser General Public License
//            along with the CluTecLib library.
//            If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "TensorPointLoop.h"

////////////////////////////////////////////////////////////////////////////////////
/// Single Loop Class Member Functions
////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////
/// Constructor

template <class CType>
CTensorPointLoop<CType>::CTensorPointLoop()
{
}


////////////////////////////////////////////////////////////////////////////////////
/// Set Tensor Idx Instance

template <class CType>
void CTensorPointLoop<CType>::Set(CTensorData<CType>& rTResult, CTensorIdx<CType>& rTLeft, CTensorIdx<CType>& rTRight) 
	throw (CCluException)
{
	Mem<int> mDim, mIdx;
	int iLoopCount, iLoop, iIdx, iDim;

	m_Loop.Set(rTLeft, rTRight);
	iLoopCount = m_Loop.Init();
	mDim.Set(iLoopCount);
	mIdx.Set(iLoopCount);

	for(iLoop = iLoopCount-1, iIdx = -1, iDim = 0; iLoop >= 0; iLoop--, iDim++)
	{
		mDim[iDim] = m_Loop.StepCount(iLoop);
		mIdx[iDim] = m_Loop.FreeIdx(iLoop); //iIdx--;
	}

	rTResult.Reset(mDim);
	m_ResultTIdx.Set(rTResult, mIdx);
	m_ResultLoop.Set(m_ResultTIdx);
}




////////////////////////////////////////////////////////////////////////////////////
// Initialize Loops. Returns number of cascaded loops.

template <class CType>
int CTensorPointLoop<CType>::Init() 
	throw (CCluException)
{
	m_ResultLoop.Init();

	return 	m_Loop.Init();
}



////////////////////////////////////////////////////////////////////////////////////
// Step loop. Returns loop level, in which step was made.
// Loop level starts at zero for most inner loop.
// If loop level is -1, all loops are finished.
// No exceptions generated by this function!

template <class CType>
int CTensorPointLoop<CType>::Step() 
{
	int iLevel = m_Loop.Step();

	if (iLevel < 0)
		return -1;

	m_ResultLoop.Step();

	return iLevel;
}

