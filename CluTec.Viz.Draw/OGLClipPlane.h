////////////////////////////////////////////////////////////////////////////////////////////////////
// project:   CluTec.Viz.Draw
// file:      OGLClipPlane.h
//
// summary:   Declares the ogl clip plane class
//
//            Copyright (c) 2019 by Christian Perwass.
//
//            This file is part of the CluTecLib library.
//
//            The CluTecLib library is free software: you can redistribute it and / or modify
//            it under the terms of the GNU Lesser General Public License as published by
//            the Free Software Foundation, either version 3 of the License, or
//            (at your option) any later version.
//
//            The CluTecLib library is distributed in the hope that it will be useful,
//            but WITHOUT ANY WARRANTY; without even the implied warranty of
//            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//            GNU Lesser General Public License for more details.
//
//            You should have received a copy of the GNU Lesser General Public License
//            along with the CluTecLib library.
//            If not, see <http://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "OGLBaseElement.h"
#include "OGLVertex.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 	OpenGL Blend Element.
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CLUDRAW_API COGLClipPlane : public COGLBaseElement
{
public:

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// 	Default constructor.
	/// </summary>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	COGLClipPlane();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// 	Copy Constructor.
	/// </summary>
	///
	/// <param name="xBlend">	The blend. </param>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	COGLClipPlane(const COGLClipPlane& xClipPlane);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// 	Copies this COGLClipPlane.
	/// </summary>
	///
	/// <returns>	Null if it fails, else the copied instance. </returns>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual COGLBaseElement* Copy()
	{
		return (COGLBaseElement*) new COGLClipPlane(*this);
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Assignment operator. </summary>
	///
	/// <param name="xBlend">	The blend. </param>
	///
	/// <returns>	A shallow copy of this COGLClipPlane. </returns>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	COGLClipPlane& operator=(const COGLClipPlane& xClipPlane);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Sets the OpenGL clip plane Id.
	/// </summary>
	///
	/// <param name="uId">	The OpenGL clip plane identifier. </param>
	///
	/// <returns>	True if the clip plane id is available, otherwise false. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	bool SetGlId(unsigned uId);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Gets the number of clip planes available.
	/// </summary>
	///
	/// <returns>	The clip plane count. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	unsigned GetClipPlaneCount();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Sets a clip plane.
	/// </summary>
	///
	/// <param name="vCenter">	The plane center. </param>
	/// <param name="vDirX">  	The plane x direction. </param>
	/// <param name="vDirY">  	The plane y direction. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetClipPlane(const COGLVertex& vCenter, const COGLVertex& vDirX, const COGLVertex& vDirY);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Enables or disables the clip plane.
	/// </summary>
	///
	/// <param name="bEnable">	true to enable, false to disable. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Enable(bool bEnable)
	{
		m_bIsEnabled = bEnable;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// 	Applies this COGLClipPlane.
	/// </summary>
	///
	/// <param name="eMode">	The mode. </param>
	/// <param name="rData">	[in] The data. </param>
	///
	/// <returns>	True if it succeeds, false if it fails. </returns>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool Apply(COGLBaseElement::EApplyMode eMode, COGLBaseElement::SApplyData& rData);

protected:

	bool m_bIsEnabled;
	unsigned m_uCliPlaneGlId;
	double m_pdClipPlane[4];
};
